#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jan 19 15:10:12 2019
Testing different colormaps
@author: deepak

SymLogNorm: two humps, one negative and one positive, The positive
with 5-times the amplitude. Linearly, you cannot see detail in the
negative hump.  Here we logarithmically scale the positive and
negative data separately.

Note that colorbar labels do not come out looking very good.
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as colors
from matplotlib.mlab import bivariate_normal
plt.close("all")
import cmocean


def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap

N=100
X, Y = np.mgrid[-3:3:complex(0, N), -2:2:complex(0, N)]
Z1 = (bivariate_normal(X, Y, 1., 1., 1.0, 1.0))**2  \
    - 0.4 * (bivariate_normal(X, Y, 1.0, 1.0, -1.0, 0.0))**2
Z1 = Z1/0.03

Zmin = np.min(Z1)
Zmax = np.max(Z1)

print(Zmin)
print(Zmax)

Ztrans = 0  # This is the value which we want to coincide with the center of the colormap

Zmin_scaled = (Zmin - Ztrans)/(Zmax - Ztrans) # Mapped to the interval [-1,1]
Zmax_scaled = (Zmax - Ztrans)/(Zmax - Ztrans)

Zmin_unit = (Zmin_scaled + 1)/2
Zmax_unit = (Zmax_scaled + 1)/2

print(Zmin_unit)
print(Zmax_unit)

Ztrans_unit = (Ztrans - Zmin)/(Zmax-Zmin)

#cmap = plt.get_cmap('RdBu_r')
cmap = cmocean.cm.matter
new_cmap = truncate_colormap(cmap, Zmin_unit, Zmax_unit)

# Display the new colormap
a = np.outer(np.arange(Zmin_scaled,Zmax_scaled,0.01),np.ones(10))
    
plt.figure()
plt.imshow(a,aspect='auto',cmap = new_cmap, origin="lower")


fig, ax = plt.subplots(2, 1)

#pcm = ax[0].pcolormesh(X, Y, Z1,
#                       norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,
#                                              vmin=-1.0, vmax=1.0),
#                       cmap='RdBu_r')
#fig.colorbar(pcm, ax=ax[0], extend='both')
#
#pcm = ax[1].pcolormesh(X, Y, Z1, cmap='RdBu_r', vmin=-np.max(Z1))
#fig.colorbar(pcm, ax=ax[1], extend='both')
#fig.show()
#
#pcm = ax[0].contourf(X,Y,Z1,cmap='RdBu_r',norm=colors.SymLogNorm(linthresh=0.03, linscale=0.03,
#                                              vmin=-1.0, vmax=1.0))
pcm0 = ax[0].contourf(X, Y, Z1, cmap=cmap, levels = np.linspace(Zmin,Zmax,50))
pcm1 = ax[1].contourf(X, Y, Z1, cmap=new_cmap, levels = np.linspace(Zmin,Zmax,50))
plt.contour(pcm1, levels = [Ztrans], colors='r')

cbar0 = plt.colorbar(pcm0, ax=ax[0])
cbar1 = plt.colorbar(pcm1, ax=ax[1])

cbar1.ax.plot([0, 1],[Ztrans_unit, Ztrans_unit],'r')
fig.show()


